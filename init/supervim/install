#!/bin/bash

help=0
all=0
proxy=""
font=0
vimGo=0
ycm=0

whichVim=""
cfg=""
root=""
while getopts "hafgp:y" opt;do
    case "$opt" in
        h)
            help=1
            ;;
        a)
            all=1
            ;;
        f)
            font=1
            ;;
        g)
            vimGo=1
            ;;
        p)
            proxy=$OPTARG
            echo "Proxy is :$proxy"
            ;;
        y)
            ycm=1
            ;;
        *)
            help
            ;;
    esac
done

shift $((OPTIND-1))
whichVim=$1
if [[ "$whichVim" == "nvim" ]];then
    root="$HOME/.config/nvim"
    cfg="$root/init.vim"
elif [[ "$whichVim" == "vim" ]];then
    root="$HOME/.vim"
    cfg="$HOME/.vimrc"

    version=$(\vim --version | grep -Po '(?<=Vi IMproved )\d+\.\d+')
    echo "vim version is ${version}"
    if (( $(echo "$version>=7.4" | bc -l) )) ;then
        #vim 7.4以后，vimrc文件可以放到.vim目录中
        cfg="$root/vimrc"
    fi
else
    echo "Unknown vim type: $whichVim! Not vim or nvim."
    exit 1
fi

echo "Install supervim for $whichVim"
echo "Config file is $cfg"
echo "Root dir is $root"

if (($help==1));then
    help
    exit 0
fi

if (($all==1));then
    all
    exit 0
fi

if (($font==1));then
    installFont
fi

mkdir -pv $root/autoload
mkdir -pv $root/plugins

cp -r ./colors $root
cp -r ./ftplugin $root

echo  "Downloading vim-plug from github..."
if [ -n "$proxy" ];then
echo "use proxy5:$proxy"
    curl --socks5 "$proxy" -fLo $root/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
else
    curl -fLo $root/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

if [[ "$whichVim" == "nvim" ]];then
    sudo -H -E pip install --upgrade pip
    sudo -H -E pip install --upgrade neovim
    # if netstat -tan|grep :8118;then
    #     sudo -H pip --proxy 127.0.0.1:8118 install --upgrade pip
    #     sudo -H pip --proxy 127.0.0.1:8118 install --upgrade neovim
    # else
    #     sudo -H pip install --upgrade pip
    #     sudo -H pip install --upgrade neovim
    # fi
fi

cp -v ./install $cfg
if (($ycm==1));then
    sed -ibak "s|\"[ ]*\(Plug 'Valloric/YouCompleteMe'\)|\1|" $cfg
    \rm "${cfgFile}bak"

    if [[ "$whichVim" == "vim" ]];then
        dest="$HOME/.vim/plugins/YouCompleteMe"
    elif [[ "$whichVim" == "nvim" ]];then
        dest="$HOME/.config/nvim/plugins/YouCompleteMe"
    fi
fi
if (($vimGo==1));then
    sed -ibak "s|\"[ ]*\(Plug 'fatih/vim-go'\)|\1|" $cfg
    \rm "${cfg}bak"
    export GOPATH=~/go

fi

echo "Install plugins..."
$whichVim +PlugInstall +qall

if (($ycm==1));then
    echo "Install YouCompleteMe..."
    if [ -d "$dest" ];then
        cd "$dest"
        option=
        read -p "Ycm for clang(cpp)? [Y/n]" -t 2 clang
        if [[ "$clang" != [nN] ]];then
            option+=" --clang-completer "
            option+=" --system-libclang "
        fi
        read -p "Ycm for golang? [Y/n]" -t 2 golang
        if [[ "$golang" != [nN] ]];then
            option+=" --gocode-completer "
        fi

        #./install.py  --gocode-completer --clang-completer --system-libclang 
        eval ./install.py  "$option"
    else
        echo "Doesn't exist $dest"
    fi
fi

if (($vimGo==1));then
    echo "Install vim-go..."
    $vim +GoInstallBinaries +qall
fi

help(){
    echo "Usage: $(basename $0) OPTIONS vim/nvim"
    echo "OPTIONS:"
    echo -e "\t\t-f for install font"
    echo -e "\t\t-p socks5Proxy  proxy set"
    echo -e "\t\t-g for vim-go"
    echo -e "\t\t-y for YouCompleteMe"
}

installDependence(){
    #arch
    if command -v pacman >/dev/null 2>&1;then
        archApps="linux-headers clang neovim vim cmake python boost python-pip go go-tools fontconfig ctags "
        sudo pacman -Syu --noconfirm
        for tool in ${archApps};do
            sudo pacman -S $tool --noconfirm --needed
        done
    fi

    #fedora
    if command -v dnf >/dev/null 2>&1;then
        fedoraApps="kernel-devel vim clang python-devel python-pip python3-devel python3-pip cmake golang golang-godoc boost-devel ncurses-devel "
        sudo dnf update -y
        sudo dnf groupinstall "development tools" -y
        for tool in ${fedoraApps};do
            sudo dnf install $tool -y
        done
    fi

    #ubuntu
    if command -v apt-get >/dev/null 2>&1;then
        ubuntuApps="build-essential linux-headers-generic vim vim-gtk cmake clang python-apt python-dev python-pip python3-dev python3-pip libboost-all-dev golang golang-golang-x-tools ncurses-dev "
        sudo apt-get update -y
        for tool in ${ubuntuApps};do
            sudo apt-get install $tool -y
        done
    fi
}

#安装airline需要用的字体
installFont(){
    case $(uname) in
        "Linux")
            if fc-list | grep -iq Powerline;then
                return
            fi

            if [ ! -d ~/.local/share/fonts ];then
                mkdir -pv ~/.local/share/fonts
            fi
            cp ./fonts/PowerlineSymbols.otf ~/.local/share/fonts
            cp ./fonts/Droid\ Sans\ Mono\ for\ Powerline\ Nerd\ Font\ Complete.otf ~/.local/share/fonts
            fc-cache -vf ~/.local/share/fonts

            if [ ! -d ~/.config/fontconfig/conf.d ];then
                mkdir -pv ~/.config/fontconfig/conf.d
            fi
            cp ./fonts/10-powerline-symbols.conf ~/.config/fontconfig/conf.d
            ;;
        "Darwin")
            command -v brew >/dev/null 2>&1 || { echo "Need install homebrew first!"; exit 1; }
            if [ -n "$proxy" ];then
                ALL_PROXY=$proxy brew tap caskroom/fonts
                ALL_PROXY=$proxy brew cask install font-hack-nerd-font
            else
                brew tap caskroom/fonts
                brew cask install font-hack-nerd-font
            fi
            echo "set Knack nerd font in iterm"
            ;;
        MINGW32*)
            echo "Please install nerd font manually."
            ;;
        *)
            echo "Unknown OS,install font failed!" >& 2
            ;;
    esac
}


